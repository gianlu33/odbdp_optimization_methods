HashMap<Integer, Integer> solution = Utils.generateRandomSolution(data.getnQueries(), data.getnConfigurations());
		
		int[] indexes = Utils.activateIndexes(data.getnIndexes(), data.getConfigurationIndexes(), solution);
		for(int i=0; i<indexes.length; i++) {
			System.out.print(indexes[i] + " ");
		}
		System.out.println();
		
		int objfunction = Utils.computeObjectiveFunction(data.getConfigurationQueryGain(), data.getIndexesCost(), solution, indexes);
		int memory = Utils.computeMemoryUsed(data.getIndexesMemory(), indexes);
		
		System.out.println(objfunction + " " + memory);
		
		int conf = solution.containsKey(0) ? solution.get(0) : -1;
		
		int[] newIndexes = Utils.updateIndexes(indexes, data.getConfigurationIndexes(), conf, 0);
		for(int i=0; i<newIndexes.length; i++) {
			System.out.print(newIndexes[i] + " ");
		}
		System.out.println();
		
		solution.put(0,0);
		long timeStartNormal = System.currentTimeMillis();
		int newobjfunction = Utils.computeObjectiveFunction(data.getConfigurationQueryGain(), data.getIndexesCost(), solution, newIndexes);
		long timeEndNormal = System.currentTimeMillis();
		
		int newmemory = Utils.computeMemoryUsed(data.getIndexesMemory(), newIndexes);
		System.out.println(newobjfunction + " " + newmemory);
		
		int oldgain = data.getConfigurationQueryGain()[1][4];
		int newgain = data.getConfigurationQueryGain()[0][4];
		long timeStartUpdate = System.currentTimeMillis();
		int newobjfunctionupdated = Utils.updateObjectiveFunction(data.getIndexesCost(), objfunction, indexes, newIndexes, oldgain, newgain);
		long timeEndUpdate = System.currentTimeMillis();
		System.out.println(newobjfunctionupdated);
		
		System.out.println("Time");
		System.out.println("Normal: " + (timeEndNormal - timeStartNormal));
		System.out.println("Update: " + (timeEndUpdate - timeStartUpdate));